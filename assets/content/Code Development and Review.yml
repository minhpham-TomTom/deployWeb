---
Coding:
  Do you adopt coding guidelines?:
    risk: 
    measure: 
    difficultyOfImplementation:
      knowledge: 
      time: 
      resources: 
    usefulness:
    level: 1
    implementation: 
    samm2: 
    bsimm: ssdl-touchpoints|CR
    iso270012017:
  Are you using linter in IDE?:
    risk: 
    measure: 
    evidence: 
    difficultyOfImplementation:
      knowledge: 
      time: 
      resources: 
    usefulness: 
    level: 1
    implementation: 
    samm2: 
    bsimm: ssdl-touchpoints|CR
    iso270012017:
  Do you digitally sign the code?:
    risk: Unauthorized manipulation of source code might be difficult to spot.
    measure: Digitally signing commits helps to prevent unauthorized manipulation of source code.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 2
    usefulness: 3
    level: 3
    implementation:
    dependsOn:
      - Do you have a defined build process?
    samm: OA3-B
    samm2: i-secure-build|A|2
    bsimm: ssdl-touchpoints|CR
    iso270012017:
      - 14.2.6
Code Review:
  Do you enforce approval by reviewing any new version?:
    risk: An individual might forget to implement security measures to protect source code or infrastructure components.
    measure: On each new version (e.g. Pull Request) of source code or infrastructure components a security peer review of the changes is performed (two eyes principle) and approval given by the reviewer.
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 3
    level: 1
    samm: IR1-B
    samm2: i-secure-build|A|1
    bsimm: ssdl-touchpoints|CR1
    iso270012017:
      - 6.1.2
      - 14.2.1
  Do you use tools for code review?:
    risk: 
    measure: 
    difficultyOfImplementation:
      knowledge: 
      time: 
      resources: 
    usefulness: 
    level: 2
    implementation: 
    dependsOn:
    samm2: 
    bsimm: ssdl-touchpoints|CR2
    iso270012017:
  Do you have an advanced code review process?:
    risk: 
    measure: 
    difficultyOfImplementation:
      knowledge: 
      time: 
      resources: 
    usefulness: 
    level: 3
    implementation: 
    dependsOn:
    samm2: 
    bsimm: ssdl-touchpoints|CR3
    iso270012017:
Infrastructure Hardening:
  Do you use simple access control for systems?:
    risk: Attackers a gaining access to internal systems and application interfaces
    measure: All internal systems are using simple authentication
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 3
    usefulness: 5
    level: 1
    dependsOn:
      - Do you have a defined deployment process?
    implementation: 
      - HTTP-Basic Authentication
      - TLS
      - VPN
    samm: EH1-B
    samm2: o-environment-management|A|1
    bsimm:
    iso270012017:
      - 9.4.1
  Do you use segmented networks for virtual environments?:
    risk: Virtual environments in default settings are able to access other virtual environments on the network stack. By using virtual machines, it is often possible to connect to other virtual machines. By using docker, one bridge is used by default so that all containers on one host can communicate with each other.
    measure: The communication between virtual environments is regulated.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 3
    usefulness: 5
    level: 1
    dependsOn: []
    implementation:
      - istio
      - bridges
      - firewalls
    samm2: o-environment-management|A|1
    bsimm:
    iso270012017:
      - 13.1.3
  Do you use test and production environments?:
    risk: Security tests are not running regularly because test environments are missing
    measure: A production and a production like envirnoment is used
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 5
    usefulness: 4
    level: 1
    dependsOn:
      - Do you have a defined deployment process?
    samm2: o-environment-management|A|1
    bsimm:
    iso270012017:
      - 12.1.4
      - 17.2.1
  Are applications running in virtualized environments?:
    risk: Through a vulnerability in one service on a server, the attacker gains access to other services running on the same server.
    measure: Applications are running in a dedicated and isolated virtualized environments.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 5
    usefulness: 3
    level: 2
    samm2: o-environment-management|A|1
    bsimm:
    iso270012017:
      - 13.1.3
  Do you check the sources of used libraries?:
    risk: Application and system libraries can have implementation flaws or deployment flaws.
    measure: Each libraries source is checked to have a trusted source.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 1
    usefulness: 3
    level: 2
    samm: SA1-A
    samm2: o-environment-management|A|1
    bsimm:
    iso270012017:
      - not explicitly covered by ISO 27001 - too specific
      - 14.2.1
      - 14.2.5
  Do you filter outgoing traffic?:
    risk: A compromised infrastructure component might try to send out stolen data.
    measure: Having a whitelist and explizitly allowing egress traffic provides the ability to stop unauthorized data leackage.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 3
    usefulness: 2
    level: 2
    dependsOn: []
    implementation:
      - Open Policy Agent
      - firewalls
    samm2: o-environment-management|A|1
    bsimm:
    iso270012017:
      - 13.1.3
  Do you harden the cluster environments?:
    risk: Using default configurations for a cluster environment leads to potential risks.
    measure: Harden cluster environments according to best practices. Level 1 and partiually level 2 from hardening practices like 'CIS Kubernetes Bench for Security' should considered.
    difficultyOfImplementation:
      knowledge: 4
      time: 3
      resources: 2
    usefulness: 4
    level: 2
    implementation:
      - CIS Kubernetes Bench for Security https://www.cisecurity.org/cis-benchmarks/
      - CIS Docker Bench for Security https://www.cisecurity.org/cis-benchmarks/
      - "For example for Containers: Deny running containers as root, deny using advanced privileges, deny mounting of the hole filesystem, ..."
    samm2: o-environment-management|A|1
    bsimm:
    iso270012017:
      - 13.1.3
  Are virtual environments limited?:
    risk: Denial of service (internally by an attacker or unintentionally by a bug) on one service effects other services
    measure: All virtual environments are using resource limits on hard disks, memory and CPU
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 3
    usefulness: 3
    level: 2
    dependsOn:
      - Are applications running in virtualized environments?
    samm2: o-environment-management|A|1
    bsimm:
    iso270012017:
      - 12.1.3
      - 13.1.3
      - 17.2.1
  Do you use security by default for components?:
    risk: Components (images, libraries, applications) are not hardened.
    measure: Hardening of components is important, specially for image on which other teams base on. Hardening should be performed on the operation system and on the services inside (e.g. Nginx or a Java-Application).
    difficultyOfImplementation:
      knowledge: 4
      time: 3
      resources: 1
    usefulness: 3
    level: 2
    implementation: 'For applications: Check default encoding, managing secrets, crypto,
      authentication'
    dependsOn:
      - Do you have a defined build process?
    samm2: o-environment-management|A|1
    bsimm:
    iso270012017:
  Do you enforce Infrastructure as Code?:
    risk: No tracking of changes in systems might lead to errors in the configuration. In additions, it might lead to unauthorized changes. 
    #An examples is jenkins.
    measure: Systems are setup by code. A full environment can be provisioned. 
    #In addition, software like Jenkins 2 can be setup and configured in in code too. The code should be stored in a version control system.
    difficultyOfImplementation:
      knowledge: 3
      time: 5
      resources: 4
    usefulness: 4
    level: 3
    implementation: 
      - GitOps, Ansible, Chef, Puppet
    samm2: o-environment-management|A|1
    bsimm:
    iso270012017:
      - 12.1.1
      - 12.1.2
  Do you ensure limitation of system calls in virtual environments?:
    risk: System calls in virtual environments like docker can lead to privilege escalation.
    measure: System calls in virtual environments like docker are audited and limited.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 3
    usefulness: 5
    level: 3
    dependsOn:
      - Are applications running in virtualized environments?
    implementation: 
      - seccomp, strace
    samm2: o-environment-management|A|1
    iso270012017:
  Do you enforce a Immutable Infrastructure?:
    risk: The availability of IT systems might be disturbed due to components failures
    measure: Redundancies in the IT systems
    difficultyOfImplementation:
      knowledge: 2
      time: 2
      resources: 1
    usefulness: 3
    level: 3
    dependsOn:
      - Do you enforce Infrastructure as Code?
      - Usage of Semantic Versioning for components like project images
    implementation: 
      - Remove direct access to infrastructure, https://semver.org/
    samm2: o-environment-management|A|1
    bsimm:
    iso270012017:
      - 17.2.1
  Do you enforce a Microservice-Architecture?:
    risk: Monolithic applications are hard to test.
    measure: A microservice-architecture helps to have small components, which are more easy to test.
    difficultyOfImplementation:
      knowledge: 4
      time: 5
      resources: 5
    usefulness: 3
    level: 3
    samm: SA2
    samm2: o-environment-management|A|1
    bsimm:
    iso270012017:
  Is Production near environments being used by developers?:
    risk: In case an errors occurs in production, the developer need to be able to create a production near environment on a local development environment.
    measure: Usage of infrastructure as code helps to create a production near environment. The developer needs to be trained in order to setup a local development environment. In addition, it should be possible to create production like test data. Often personal identifiable information is anonymized in order to comply with data protection laws.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 3
    usefulness: 4
    level: 3
    dependsOn:
      - Do you have a defined deployment process?
      - Do you enforce Infrastructure as Code?
    samm: SA1
    samm2: o-environment-management|A|1
    bsimm:
    iso270012017:
      - 12.1.4
      - 17.2.1
  Do you use role based authentication and authorization?:
    risk: Everyone is able to get unauthorized access to information on systems or to modify information unauthorized on systems.
    measure: The usage of a (role based) access control helps to restrict system access to authorized users.
    difficultyOfImplementation:
      knowledge: 2
      time: 3
      resources: 1
    usefulness: 3
    level: 3
    implementation: Directory Service, Plugins
    dependsOn:
      - Do you have a defined deployment process?
      - Do you have a defined build process?
    samm2: o-environment-management|A|1
    bsimm:
    iso270012017:
      - 9.4.1
  Do you use 2FA?:
    risk: One factor authentication is more vulnerable to brute force attacks and is considered less secure.
    measure: Two factor authentication for all privileged accounts on systems and applications
    difficultyOfImplementation:
      knowledge: 3
      time: 2
      resources: 3
    usefulness: 4
    level: 3
    implementation: Smartcard, YubiKey, SMS, TOTP
    samm2: "TODO"
    bsimm:
    iso270012017:
      - 9.1.1
      - 9.4.2
      - 14.2.5
  Do you use a chaos monkey?:
    risk: Due to manuel changes on a system, they are not replaceable anymore. In case of a crash it might happen that a planned redundant system is unavailable. In addition, it is hard to replay manual changes.
    measure: A randomized periodically shutdown of systems makes sure, that nobody will perform manual changes to a system.
    difficultyOfImplementation:
      knowledge: 3
      time: 5
      resources: 5
    usefulness: 3
    level: 3
    samm2: o-environment-management|A|1
    bsimm:
    iso270012017:
      - 17.1.3
  Do you enforce versioning?:
    risk: Changes to production systems can not be undone.
    measure: Versioning of artifacts related to production environments. 
    #For example Jenkins configuration, docker images, system provisioning code.
    difficultyOfImplementation:
      knowledge: 3
      time: 3
      resources: 3
    usefulness: 5
    level: 3
    dependsOn:
      - Do you have a defined deployment process?
    samm2: o-environment-management|A|1
    bsimm:
    iso270012017:
      - 12.1.1
      - 12.1.2
      - 14.2.2
  Do you prevent unauthorized installation?:
    risk: Unapproved components are used.
    measure: "Components must be whitelisted. Regular scans on the docker infrastructure (e.g. cluster) need to be performed, to verify that only standardized base images are used."
    difficultyOfImplementation:
      knowledge: 2
      time: 1
      resources: 1
    usefulness: 3
    level: 3
    iso270012017:
      - 12.5.1
      - 12.6.1
    implementation: "Example: All docker images used by teams need to be based on standard images."
Application Hardening:
  Do you ensure Level 1 of Application Hardening?:
    risk: Using an insecure application might lead to a compromised application. This might lead to total data theft or data modification.
    measure: |
      Following frameworks like the OWASP Application Security Verification Standard Level 1 or OWASP Mobile Application Security Verification Standard Level 1
      in all applications provides a good baseline.
    difficultyOfImplementation:
      knowledge: 4
      time: 4
      resources: 2
    usefulness: 4
    level: 1
    md-description: |
      To tackle the security of code developed in-house, OWASP offers an extensive collection of [Cheatsheets](https://cheatsheetseries.owasp.org/) demonstrating how to implement features securely. Moreover, the Security Knowledge Framework[1] offers an extensive library of code patterns spanning several programming languages. These patterns can be used to not only jumpstart the development process, but also do so securely.

      [...]

      ### Planning aka Requirements Gathering & Analysis
      The Requirements gathering process tries to answer the question: _"What is the system going to do?"_ At this stage, the [SAMM project](https://owaspsamm.org/model/) offers 3 distinct maturity levels covering both [in-house](https://owaspsamm.org/model/design/d-security-requirements/stream-a/) software development and [third party](https://owaspsamm.org/model/design/d-security-requirements/stream-b/) supplier security.

      ![SAMM Requirements](https://github.com/OWASP/www-project-integration-standards/raw/master/writeups/owasp_in_sdlc/images/OWASP-in0.png)

      Organisations can use these to add solid security considerations at the start of the Software Development or Procurement process.

      These general security considerations can be audited by using a subsection of the ASVS controls in section V1 as a questionnaire. This process attempts to ensure that every feature has concrete security considerations.

      In case of internal development and if the organisation maps Features to Epics, the [Security Knowledge Framework](https://securityknowledgeframework.org/) can be used to facilitate this process by leveraging its questionnaire function, shown below.

      Source: [OWASP Project Integration](https://raw.githubusercontent.com/OWASP/www-project-integration-standards/master/writeups/owasp_in_sdlc/index.md)
    implementation:
      - OWASP ASVS https://owasp.org/www-project-application-security-verification-standard/
      - OWASP MASVS https://github.com/OWASP/owasp-masvs
    samm2: d-security-requirements|A|1
    bsimm: intelligence|SFD1
    iso270012017:
      - 13.1.3
  Do you ensure Level 2 of Application Hardening?:
    risk: Using an insecure application might lead to a compromised application. This might lead to total data theft or data modification.
    measure: |
      Following frameworks like the OWASP Application Security Verification Standard Level 2 or OWASP Mobile Application Security Verification Standard Level 2
    difficultyOfImplementation:
      knowledge: 4
      time: 4
      resources: 2
    usefulness: 4
    level: 2
    implementation:
      - OWASP ASVS https://owasp.org/www-project-application-security-verification-standard/
      - OWASP MASVS https://github.com/OWASP/owasp-masvs
    samm2: d-security-requirements|A|2
    bsimm: intelligence|SFD2
    iso270012017:
      - 13.1.3
  Do you ensure Level 3 of Application Hardening?:
    risk: Using an insecure application might lead to a compromised application. This might lead to total data theft or data modification.
    measure: |
      Following frameworks like the OWASP Application Security Verification Standard Level 3 or OWASP Mobile Application Security Verification Standard Maturity Requirements
    difficultyOfImplementation:
      knowledge: 4
      time: 4
      resources: 2
    usefulness: 4
    level: 3
    implementation:
      - OWASP ASVS https://owasp.org/www-project-application-security-verification-standard/
      - OWASP MASVS https://github.com/OWASP/owasp-masvs
    samm2: d-security-requirements|A|3
    bsimm: ntelligence|SFD3
    iso270012017:
      - 13.1.3
  Do you ensure full coverage of Application Hardening Level 3?:
    risk: Using an insecure application might lead to a compromised application. This might lead to total data theft or data modification.
    measure: |
      Following frameworks like the OWASP Application Security Verification Standard Level 3 or OWASP Mobile Application Security Verification Standard Maturity Requirements and gain around 95% coverage of both.
    difficultyOfImplementation:
      knowledge: 4
      time: 4
      resources: 2
    usefulness: 4
    level: 3
    implementation:
      - OWASP ASVS https://owasp.org/www-project-application-security-verification-standard/
      - OWASP MASVS https://github.com/OWASP/owasp-masvs
    samm2: d-security-requirements|A|3
    bsimm: intelligence|SFD3
    iso270012017:
      - 13.1.3
...
